<?php

/**
 * Implements hook_node_info()
 */
function lemberg_node_info() {
  return array(
    'lemberg' => array(
      'name' => t('Lemberg node'),
      'base' => 'lemberg',
      'description' => t('Test content type'),
    )
  );
}

/**
 * Implement hook_form()
 */
function lemberg_form($node, $form_state) {
    return node_content_form($node, $form_state);
}

/**
 * Implements hook_theme_registry_alter()
 */
function lemberg_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'lemberg');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _lemberg_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Implements hook_block_info().
 */
function lemberg_block_info() {
  $blocks['lemberg_last_nodes'] = array(
    'info' => t('Last three lemberg nodes'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function lemberg_block_view($delta = '') {
  switch ($delta) {
    case 'lemberg_last_nodes':
      $block['subject'] = t('Last three lemberg nodes');
      if (user_access('access content')) {
        $result = get_last_nodes();

        $items = array();

        foreach ($result as $node) {
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          );
        }

        if (empty($items)) {
          $block['content'] = t('No lemberg nodes available.');
        }
        else {
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
      }
      return $block;
  }
}

/**
 * Finds the last nodes.
 */
function get_last_nodes($count = 3) {

  $nids = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.status', NODE_PUBLISHED)
      ->orderBy('created', 'DESC')
      ->range(0, $count)
      ->execute()
      ->fetchCol();

  $nodes = node_load_multiple($nids);

  return $nodes ? $nodes : array();
}


/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 */
function _lemberg_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}




///**
// * Implements hook_theme().
// */
//function lemberg_theme() {
//  return array(
//    'lemberg_node' => array(
//      'template' => 'lemberg-node',
//    ),
//  );
//}
//
///**
// * Implements MODULE_preprocess_HOOK().
// */
//function template_preprocess_lemberg_node(&$variables) {
//  $variables['view_mode'] = $variables['elements']['#view_mode'];
//  // Provide a distinct $teaser boolean.
//  $variables['teaser'] = $variables['view_mode'] == 'teaser';
//  $variables['node'] = $variables['elements']['#node'];
//  $node = $variables['node'];
//
//  $variables['date']      = format_date($node->created);
//  $variables['name']      = theme('username', array('account' => $node));
//
//  $uri = entity_uri('node', $node);
//  $variables['node_url']  = url($uri['path'], $uri['options']);
//  $variables['title']     = check_plain($node->title);
//  $variables['page']      = $variables['view_mode'] == 'full' && node_is_page($node);
//
//  // Flatten the node object's member fields.
//  $variables = array_merge((array) $node, $variables);
//
//  // Helpful $content variable for templates.
//  $variables += array('content' => array());
//  foreach (element_children($variables['elements']) as $key) {
//    $variables['content'][$key] = $variables['elements'][$key];
//  }
//
//  // Make the field variables available with the appropriate language.
//  field_attach_preprocess('node', $node, $variables['content'], $variables);
//
//  // Display post information only on certain node types.
//  if (variable_get('node_submitted_' . $node->type, TRUE)) {
//    $variables['display_submitted'] = TRUE;
//    $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['name'], '!datetime' => $variables['date']));
//    $variables['user_picture'] = theme_get_setting('toggle_node_user_picture') ? theme('user_picture', array('account' => $node)) : '';
//  }
//  else {
//    $variables['display_submitted'] = FALSE;
//    $variables['submitted'] = '';
//    $variables['user_picture'] = '';
//  }
//
//  // Gather node classes.
//  $variables['classes_array'][] = drupal_html_class('node-' . $node->type);
//  if ($variables['promote']) {
//    $variables['classes_array'][] = 'node-promoted';
//  }
//  if ($variables['sticky']) {
//    $variables['classes_array'][] = 'node-sticky';
//  }
//  if (!$variables['status']) {
//    $variables['classes_array'][] = 'node-unpublished';
//  }
//  if ($variables['teaser']) {
//    $variables['classes_array'][] = 'node-teaser';
//  }
//  if (isset($variables['preview'])) {
//    $variables['classes_array'][] = 'node-preview';
//  }
//
////  // Clean up name so there are no underscores.
////  $variables['theme_hook_suggestions'][] = 'node__' . $node->type;
////  $variables['theme_hook_suggestions'][] = 'node__' . $node->nid;
////
////
////  if ($node->type == 'lemberg') {
//////  print_r($node->type); exit;
////    $variables['theme_hook_suggestions'][] = 'node__lemberg';
////  }
//
//}