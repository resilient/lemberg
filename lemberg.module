<?php

/**
 * Implements hook_node_info()
 */
function lemberg_node_info() {
  return array(
    'lemberg' => array(
      'name' => t('Lemberg node'),
      'base' => 'lemberg',
      'description' => t('Test content type'),
    )
  );
}

/**
 * Implement hook_form()
 */
function lemberg_form($node, $form_state) {
    return node_content_form($node, $form_state);
}

/**
 * Implements hook_theme_registry_alter()
 */
function lemberg_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'lemberg');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _lemberg_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Implements hook_block_info().
 */
function lemberg_block_info() {
  $blocks['lemberg_last_nodes'] = array(
    'info' => t('Last three lemberg nodes'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'region' => 'sidebar_first',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function lemberg_block_view($delta = '') {
  switch ($delta) {
    case 'lemberg_last_nodes':
      $block['subject'] = t('Last three lemberg nodes');
      if (user_access('access content')) {
        $result = _lemberg_get_last_nodes();

        $items = array();

        foreach ($result as $node) {
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          );
        }

        if (empty($items)) {
          $block['content'] = t('No lemberg nodes available.');
        }
        else {
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
      }
      return $block;
  }
}

/**
 * Implements hook_views_api().
 */
function lemberg_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function lemberg_preprocess_node(&$variables) {
  $node = $variables['node'];

  if ($node->type == 'lemberg') {
    //different templates for nodes by odd and even nid's
    if ($node->nid % 2 == 0) {
      $variables['theme_hook_suggestions'][] = 'node__lemberg__odd';
    } else {
      $variables['theme_hook_suggestions'][] = 'node__lemberg__even';
    }
  } else {
    $variables['theme_hook_suggestions'][] = 'node__' . $node->type;
    $variables['theme_hook_suggestions'][] = 'node__' . $node->nid;
  }

}

/**
 * Implements hook_webform_select_options_info().
 */
function lemberg_webform_select_options_info() {
  $items = array();
  $items['lembergnodes'] = array(
    'title' => t('Lemberg nodes'),
    'options callback' => 'webform_options_lemberg_nodes',
  );
  return $items;
}

/**
 * Webform options info callback.
 */
function webform_options_lemberg_nodes() {
  $nodes = array();
  $result = _lemberg_get_all_nodes();

  foreach($result as $node) {
    $nodes[$node->nid] = $node->title;
  }

  return $nodes;
}

/**
 * Finds the last lemberg nodes.
 */
function _lemberg_get_last_nodes($count = 3) {

  $nids = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'lemberg')
      ->condition('n.status', NODE_PUBLISHED)
      ->orderBy('created', 'DESC')
      ->range(0, $count)
      ->execute()
      ->fetchCol();

  $nodes = node_load_multiple($nids);

  return $nodes ? $nodes : array();
}

/**
 * Finds all lemberg nodes.
 */
function _lemberg_get_all_nodes() {

  $nids = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'lemberg')
      ->condition('n.status', NODE_PUBLISHED)
      ->orderBy('created', 'DESC')
      ->execute()
      ->fetchCol();

  $nodes = node_load_multiple($nids);

  return $nodes ? $nodes : array();
}


/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 */
function _lemberg_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}
